{"version":3,"sources":["components/SingleTvShowInfo.js","components/TvShows.js","util/config.js","components/FirebaseDatabase.js","components/DisplayResultDashboard.js","components/CreateNewEvent.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["SingleTvShowInfo","state","tvShow","image","network","time","axios","url","this","props","match","params","id","method","dataType","then","response","console","log","data","setState","original","name","schedule","catch","Swal","fire","title","text","icon","confirmButtonText","src","alt","genres","summary","Component","TvShows","getShows","showList","dayOfWeek","tempArray","aShow","days","includes","webChannel","push","showsFilteredByDay","showsArray","genreArray","getDay","event","preventDefault","newDay","target","value","selectedDay","apiData","filteredShow","filteredArrayGenre","userGenre","map","forEach","genre","showsFilteredByGenre","renderAllFilteredTvShows","array","show","newTvShowObjectToDisplay","imdb","externals","join","summaryHtml","className","key","onClick","retrieveTvShowClicked","href","to","removeTags","rawString","selectedGenre","genrerray","onChange","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","Firebase","database","ref","FirebaseDatabase","renderEvents","allEventsArray","eventClicked","i","retrieveEventClicked","type","partySize","on","snapshot","val","newStateWithEvents","hasOwnProperty","eventObj","eventName","DisplayResultDashboard","tvShowClicked","CreateNewEvent","handleOnSubmit","e","Object","values","indexOf","handelOnChange","onSubmit","htmlFor","placeholder","min","MainPage","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2df2232.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass SingleTvShowInfo extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            tvShow: [],\r\n            image: \"\",\r\n            network: \"\",\r\n            time: \"\"\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n            axios({\r\n                url: `http://api.tvmaze.com/shows/${this.props.match.params.id}`,\r\n                method: 'GET',\r\n                \"async\": true,\r\n                \"crossDomain\": true,\r\n                dataType: 'json',\r\n            }).then((response) => {\r\n                console.log(response.data);\r\n\r\n                this.setState({\r\n                    tvShow: response.data\r\n                })\r\n\r\n                this.setState({\r\n                    image: this.state.tvShow.image.original\r\n                })\r\n\r\n                this.setState({\r\n                    network: this.state.tvShow.network.name\r\n                })\r\n\r\n                this.setState({\r\n                    time: this.state.tvShow.schedule.time\r\n                })\r\n        }).catch(() => {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'Something went wrong!',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })        \r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        // console.log(this.state.tvShow.image)\r\n        return(\r\n            <div>\r\n                <h2>{this.state.tvShow.name}</h2>\r\n                <img src={this.state.image} alt=\"sorted tv show results\" />\r\n                {/* <a href={this.state.tvShow.imdb}>Go to Imdb</a> */}\r\n                <p>Genres: {this.state.tvShow.genres}</p>\r\n                <p>Network Name: {this.state.network}</p>\r\n                <p>Time: {this.state.time}</p>\r\n                {/* <img src={`https://image.tmdb.org/t/p/w500${this.state.movieInfo.poster_path} */}\r\n                {/* `} alt=\"\" /> */}\r\n                <p>{this.state.tvShow.summary}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleTvShowInfo;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass TvShows extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            apiData: [],\r\n            showsFilteredByDay: [],\r\n            showsFilteredByGenre: [],\r\n            selectedDay: \"Monday\",\r\n            selectedGenre: \"Action\",\r\n            showsArray: false,\r\n            genrerray: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            url: 'http://api.tvmaze.com/shows',\r\n            method: 'GET',\r\n            \"async\": true,\r\n            \"crossDomain\": true,\r\n            dataType: 'json',\r\n        }).then((response) => {\r\n            // console.log(response.data);\r\n\r\n            this.setState({\r\n                apiData: response.data\r\n            })\r\n        }).then(() => (\r\n            this.getShows(this.state.apiData, this.state.selectedDay)\r\n        )).catch(() => {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'Something went wrong!',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })\r\n        })\r\n    }\r\n\r\n    // based on the day currently saved in state, make an API call to retrieve the shows airing then.\r\n    // save the returned data to state as an array of show objects.\r\n    getShows = (showList, dayOfWeek) => {\r\n        let tempArray = [];\r\n\r\n        for (let aShow in showList) {\r\n            let broadCastDay = showList[aShow].schedule.days;\r\n\r\n            if (broadCastDay.includes(dayOfWeek)) {\r\n                if (!showList[aShow].network) {\r\n                    showList[aShow].network = showList[aShow].webChannel;\r\n                }\r\n                tempArray.push(showList[aShow]);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            showsFilteredByDay: tempArray,\r\n            showsArray: true,\r\n            genreArray: false,\r\n        });\r\n    }\r\n\r\n    // when user selects a day, save the day to state\r\n    getDay = (event) => {\r\n        event.preventDefault();\r\n        let newDay = event.target.value;\r\n        this.setState({\r\n            selectedDay: newDay,\r\n        })\r\n\r\n        this.getShows(this.state.apiData, newDay);\r\n    }\r\n\r\n    // filter show once the user inputs the genre\r\n    filteredShow = (event) => {\r\n        let filteredArrayGenre = [];\r\n        let userGenre = event.target.value;\r\n        this.state.showsFilteredByDay.map((data) => {\r\n            return (\r\n                data.genres.forEach((genre) => {\r\n                    if (genre === userGenre) {\r\n                        filteredArrayGenre.push(data)\r\n                        // console.log(filteredArrayGenre)\r\n                    }\r\n                })\r\n            )\r\n        })\r\n        if (!filteredArrayGenre[0]) {\r\n            console.log(filteredArrayGenre, \"try\")\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'Something went wrong!',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })\r\n        }\r\n        this.setState({\r\n            showsFilteredByGenre: filteredArrayGenre,\r\n            showsArray: false,\r\n            genreArray: true,\r\n        })\r\n    }\r\n\r\n    renderAllFilteredTvShows = (array) => {\r\n        // if the first item in showsFilteredByGenre isn't null, we can start the function\r\n\r\n        if (array[0]) {\r\n            // map the array of objects\r\n            return array.map(show => {\r\n                // for each obj in the arr, filter out only the info we want:\r\n                // TV show title\r\n                // tv show id for key\r\n                // Picture src\r\n                // Link to IMDB page\r\n                // genres from array to string\r\n                // Description of show in html\r\n                // Network name string\r\n                // Scheduled time to play\r\n                let newTvShowObjectToDisplay = {\r\n                    title: show.name,\r\n                    id: show.id,\r\n                    image: show.image.original,\r\n                    imdb: `https://www.imdb.com/title/${show.externals.imdb}`,\r\n                    genres: show.genres.join(\" \"),\r\n                    summaryHtml: show.summary,\r\n                    network: show.network.name,\r\n                    time: show.schedule.time\r\n                };\r\n\r\n                // destructuring the newTvShowObjectToDisplay obj\r\n                const {\r\n                    title,\r\n                    id,\r\n                    image,\r\n                    imdb,\r\n                    genres,\r\n                    // summaryHtml,\r\n                    network,\r\n                    time\r\n                } = newTvShowObjectToDisplay;\r\n\r\n                // rendering the li\r\n                return (\r\n                    <li className=\"tvShowListItem\" key={id}>\r\n                        <button\r\n                            onClick={() => this.props.retrieveTvShowClicked(newTvShowObjectToDisplay)}\r\n                        >\r\n                            <h2>{title}</h2>\r\n                            <img src={image} alt=\"sorted tv show results\" />\r\n                            <a href={imdb}>Go to Imdb</a>\r\n                            <p>Genres: {genres}</p>\r\n                            <p>Network Name: {network}</p>\r\n                            <p>Time: {time}</p>\r\n                            <Link to={`/tv/${id}`}>Link here</Link>\r\n                            {/* <div>{summaryHtml}</div> */}\r\n                        </button>\r\n                    </li>\r\n                );\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    // this function parses through the summary html and removes html tags from the string.\r\n    removeTags = (rawString) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        // console.log('state: ', this.state);\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <h1> Not So Social </h1>\r\n                </header>\r\n\r\n                <div className=\"dropdownDays\">\r\n                    <select name=\"days\" id=\"days\" onChange={this.getDay}>\r\n                        <option value=\"Monday\">Monday</option>\r\n                        <option value=\"Tuesday\">Tuesday</option>\r\n                        <option value=\"Wednesday\">Wednesday</option>\r\n                        <option value=\"Thursday\">Thursday</option>\r\n                        <option value=\"Friday\">Friday</option>\r\n                        <option value=\"Saturday\">Saturday</option>\r\n                        <option value=\"Sunday\">Sunday</option>\r\n                    </select>\r\n\r\n                    <select name=\"genres\" id=\"genres\" onChange={this.filteredShow}>\r\n                        <option value=\"Action\">Action</option>\r\n                        <option value=\"Adventure\">Adventure</option>\r\n                        <option value=\"Anime\">Anime</option>\r\n                        <option value=\"Comedy\">Comedy</option>\r\n                        <option value=\"Crime\">Crime</option>\r\n                        <option value=\"Drama\">Drama</option>\r\n                        <option value=\"Family\">Family</option>\r\n                        <option value=\"Mystery\">Mystery</option>\r\n                        <option value=\"Romance\">Romance</option>\r\n                        <option value=\"Science-Fiction\">Science-Fiction</option>\r\n                        <option value=\"Thriller\">Thriller</option>\r\n                    </select>\r\n\r\n                </div>\r\n                {this.state.showsArray ?\r\n                    <div className=\"displaySection\">\r\n                        <div className=\"displayInner\">\r\n                            <ul className=\"displayAllFilteredTvShows\">{this.renderAllFilteredTvShows(this.state.showsFilteredByDay)}</ul>\r\n                        </div>\r\n                    </div> :\r\n                    null\r\n                }\r\n\r\n                {this.state.genreArray ?\r\n                    <div className=\"displaySection\">\r\n                        <div className=\"displayInner\">\r\n                            <ul className=\"displayAllFilteredTvShows\"> {this.renderAllFilteredTvShows(this.state.showsFilteredByGenre)}</ul>\r\n                        </div>\r\n                    </div> :\r\n                    null\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default TvShows;","import firebase from \"firebase/app\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCTUgM1Yl7wn2oCzdAP4YA3bNpP2r53oqE\",\r\n  authDomain: \"notsosocial-aecab.firebaseapp.com\",\r\n  databaseURL: \"https://notsosocial-aecab.firebaseio.com\",\r\n  projectId: \"notsosocial-aecab\",\r\n  storageBucket: \"notsosocial-aecab.appspot.com\",\r\n  messagingSenderId: \"973516437107\",\r\n  appId: \"1:973516437107:web:1524f659823adb27795c06\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\n// firebase\r\nimport Firebase from \"../util/config\";\r\nimport \"firebase/database\";\r\n\r\n// initiate firebase db\r\nconst db = Firebase.database().ref(\"events\");\r\n\r\nexport default class FirebaseDatabase extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      allEventsArray: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // getting all events from firebase db\r\n    db.on(\"value\", snapshot => {\r\n      // getting the value from snapshot and put it in an data constant\r\n      const data = snapshot.val();\r\n      let newStateWithEvents = []\r\n      \r\n    // using a for loop we are getting each object's key and use it \r\n      for (const key in data) {\r\n        // if the data has the key\r\n        if (data.hasOwnProperty(key)) {\r\n          // the constant object called event will be used to create a new object\r\n          const event = data[key];\r\n          // name: event name\r\n          // type: type of event\r\n          // partySize: party size\r\n          const eventObj = {\r\n            name: event.eventName,\r\n            type: event.type,\r\n            partySize: event.partySize\r\n          };\r\n          // push all events into the empty array in a loop\r\n          newStateWithEvents.push(eventObj)\r\n        }\r\n      }\r\n      // set the state with the new array\r\n      this.setState({\r\n        allEventsArray: newStateWithEvents\r\n      });\r\n    });\r\n  }\r\n\r\n  renderEvents = () => {\r\n    // map through the all events array and render elements, for each event clicked call the retrieveEventClicked props and pass the eventClicked obj in so App.js will make use of it\r\n    return this.state.allEventsArray.map((eventClicked, i) => {\r\n      return (\r\n        <li className=\"singleEvent\" key={i}>\r\n          <button onClick={() => this.props.retrieveEventClicked(eventClicked)}>\r\n            <h2>{eventClicked.name}</h2>\r\n            <p>type: {eventClicked.type}</p>\r\n            <p>party size: {eventClicked.partySize}</p>\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <ul className=\"listOfEvents\">\r\n          {/* only run renderEvents if allEventsArray isn't empty*/}\r\n          {this.state.allEventsArray && this.renderEvents()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function DisplayResultDashboard(props) {\r\n  // destructuring both props from app.js\r\n  const { name, type, partySize } = props.eventClicked;\r\n  const { title, image, imdb, genres, network, time } = props.tvShowClicked;\r\n\r\n  return (\r\n    <section className=\"DisplayResultDashboard\">\r\n      <div className=\"wrapper\">\r\n        <h2>Display Results:</h2>\r\n        <div className=\"halfDivider\">\r\n          <div className=\"eventResult\">\r\n            <h2>Social Event details</h2>\r\n            <p>Name: {name}</p>\r\n            <p>Type: {type}</p>\r\n            <p>Party Size: {partySize}</p>\r\n          </div>\r\n          <div className=\"tvShowResults\">\r\n            <h2>What you are doing instead</h2>\r\n            <h2>{title}</h2>\r\n            <div className=\"tvShowResultsImageContainer\">\r\n              <img src={image} alt={name} />\r\n            </div>\r\n            <a href={imdb}>Go to Imdb</a>\r\n            <p>Genres: {genres}</p>\r\n            <p>Network Name: {network}</p>\r\n            <p>Time: {time}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}","import React, { Component } from \"react\";\r\n// firebase\r\nimport Firebase from \"../util/config\";\r\nimport \"firebase/database\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n// firebase database\r\nconst db = Firebase.database();\r\n\r\nexport default class CreateNewEvent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      eventName: \"\",\r\n      partySize: \"\",\r\n      type: \"\"\r\n    };\r\n  }\r\n\r\n  handleOnSubmit = e => {\r\n    e.preventDefault();\r\n    // if none of the values in the state is null\r\n    if (Object.values(this.state).indexOf(\"\") === -1) {\r\n      // use the event name as the route key and update with party size and type of event info from state\r\n      db.ref(`events`).push({\r\n        eventName: this.state.eventName,\r\n        partySize: this.state.partySize,\r\n        type: this.state.type\r\n      });\r\n      Swal.fire(\"Good Job !\", \"Your event has been created!\", \"success\");\r\n      this.setState({\r\n        eventName: \"\",\r\n        partySize: \"\",\r\n        type: \"\"\r\n      });\r\n    } else {\r\n      console.log(\"error\");\r\n      // else show error message\r\n      Swal.fire(\"Oops...\", \"Please fill all inputs!\", \"error\");\r\n    }\r\n  };\r\n\r\n  // dynamically handle set states with the event's id, and set the state with event's value\r\n  handelOnChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n    console.log(this.state);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper createNewEvent\" >\r\n        <h2>Didn't find an event for you? Create a new event here!</h2>  \r\n        \r\n      <form onSubmit={this.handleOnSubmit}>\r\n          <label htmlFor=\"eventName\">please enter event name</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handelOnChange}\r\n            id=\"eventName\"\r\n            placeholder=\"event name\"\r\n            value={this.state.eventName}\r\n          />\r\n          <label htmlFor=\"partySize\">please enter party size</label>\r\n          \r\n          <input\r\n            type=\"number\" \r\n            min=\"1\"\r\n            onChange={this.handelOnChange}\r\n            id=\"partySize\"\r\n            placeholder=\"party size\"\r\n            value={this.state.partySize}\r\n          />\r\n          <label htmlFor=\"type\">please enter type of event</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handelOnChange}\r\n            id=\"type\"\r\n            placeholder=\"type of event\"\r\n            value={this.state.type}\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n// import \"./styles/style.scss\";\r\nimport TvShows from \"./TvShows\";\r\nimport FirebaseDatabase from \"./FirebaseDatabase\";\r\nimport DisplayResultDashboard from \"./DisplayResultDashboard\";\r\nimport CreateNewEvent from './CreateNewEvent';\r\n// import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n// import SingleTvShowInfo from './components/SingleTvShowInfo';\r\n\r\nclass MainPage extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            eventClicked: null,\r\n            tvShowClicked: null\r\n        };\r\n    }\r\n\r\n    retrieveEventClicked = event => {\r\n        this.setState(\r\n            {\r\n                eventClicked: event\r\n            },\r\n            () => {\r\n                console.log(this.state);\r\n            }\r\n        );\r\n    };\r\n\r\n    retrieveTvShowClicked = (event) => {\r\n        this.setState(\r\n            {\r\n                tvShowClicked: event\r\n            },\r\n            () => {\r\n                console.log(this.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <TvShows retrieveTvShowClicked={this.retrieveTvShowClicked} />\r\n                    <CreateNewEvent />\r\n                    <FirebaseDatabase retrieveEventClicked={this.retrieveEventClicked} />\r\n                    {this.state.eventClicked && this.state.tvShowClicked && (\r\n                        <DisplayResultDashboard eventClicked={this.state.eventClicked} tvShowClicked={this.state.tvShowClicked} />\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/style.scss\";\r\n// import TvShows from \"./components/TvShows\";\r\n// import FirebaseDatabase from \"./components/FirebaseDatabase\";\r\n// import DisplayResultDashboard from \"./components/DisplayResultDashboard\";\r\n// import CreateNewEvent from './components/CreateNewEvent';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport SingleTvShowInfo from './components/SingleTvShowInfo';\r\nimport MainPage from './components/MainPage';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      eventClicked: null,\r\n      tvShowClicked: null\r\n    };\r\n  }\r\n\r\n  retrieveEventClicked = event => {\r\n    this.setState(\r\n      {\r\n        eventClicked: event\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  retrieveTvShowClicked = (event) => {\r\n    this.setState(\r\n      {\r\n        tvShowClicked: event\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          \r\n        </div>\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Route path=\"/tv/:id\" component={SingleTvShowInfo} />\r\n\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}