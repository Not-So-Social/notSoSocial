{"version":3,"sources":["components/SingleTvShowInfo.js","components/SelectGenre.js","components/SelectDay.js","util/config.js","components/CreateNewEvent.js","components/FirebaseDatabase.js","components/DisplayResultDashboard.js","components/GetRandomTvShow.js","components/TvShows.js","components/Header.js","components/Footer.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["SingleTvShowInfo","state","tvShow","imageUrl","network","time","summary","image","axios","url","this","props","match","params","id","method","async","crossDomain","dataType","then","response","setState","data","original","name","schedule","genre","genres","join","imdb","externals","replace","catch","Swal","fire","title","text","icon","confirmButtonText","className","src","alt","rawString","parseArray","newArray","newString","inProcess","forEach","item","push","removeTags","href","to","Component","SelectGenre","htmlFor","onChange","filteredShow","value","SelectDay","getDay","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","Firebase","database","CreateNewEvent","handleOnSubmit","e","preventDefault","Object","values","indexOf","eventName","partySize","type","ref","handelOnChange","target","onSubmit","placeholder","min","FirebaseDatabase","renderEvents","allEventsArray","map","eventClicked","i","liStyle","background","socialEventImage","backgroundRepeat","backgroundSize","key","style","onClick","event","retrieveEventClicked","on","snapshot","a","val","newStateWithEvents","hasOwnProperty","eventObj","api_key","q","imageSrcArr","randomArrIndex","Math","floor","random","length","images","DisplayResultDashboard","window","scrollTo","top","displayResultRef","offsetTop","left","behavior","prevProps","err","console","error","tvShowClicked","GetRandomTvShow","handleOnClick","maxTvShows","filteredTvShows","randomNumberIndex","randomTvShow","renderRandomTvShow","show","newRandomTvShowObjectToDisplay","retrieveTvShowClicked","TvShows","scrollRef","getShows","showList","dayOfWeek","tempArray","aShow","days","includes","webChannel","showsFilteredByDay","showsArray","genreArray","newDay","selectedDay","apiData","filteredArrayGenre","userGenre","showsFilteredByGenre","renderAllFilteredTvShows","array","newTvShowObjectToDisplay","summaryHtml","selectedGenre","SelectGenreRef","Header","Footer","MainPage","App","basename","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2182bc21.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { Link } from \"react-router-dom\";\n\nclass SingleTvShowInfo extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tvShow: [],\n      imageUrl: \"\",\n      network: \"\",\n      time: \"\",\n      summary: \"\",\n      image: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // axios get call to tvMaxe api with the url handle props\n    axios({\n      url: `https://api.tvmaze.com/shows/${this.props.match.params.id}`,\n      method: \"GET\",\n      async: true,\n      crossDomain: true,\n      dataType: \"json\"\n    })\n      .then(response => {\n        // set the state with information from the api call\n        this.setState({\n          tvShow: response.data,\n          imageUrl: response.data.image.original,\n          network: response.data.network.name,\n          time: response.data.schedule.time,\n          summary: response.data.summary,\n          genre: response.data.genres.join(\", \"),\n          imdb: `https://www.imdb.com/title/${response.data.externals.imdb}`\n        });\n        // changing http to https to avoid mixed state warnings\n        this.setState({\n          image: this.state.imageUrl.replace(/^http:\\/\\//i, \"https://\")\n        });\n      })\n      .catch(() => {\n        Swal.fire({\n          title: \"Error!\",\n          text: \"Something went wrong!\",\n          icon: \"error\",\n          confirmButtonText: \"Cool\"\n        });\n      });\n  }\n\n  render() {\n    // this is an amazing regex like function created by none other than Lewis the mad scientist, it completely removes all the bad html tags elements we get from the tvMaze api summary description key value pair. After the filtering process, only information about the tv show remains, renewed, cleansed and ready to face the world again.\n    const removeTags = rawString => {\n      let parseArray = [...rawString];\n      let newArray = [];\n      let newString = \"\";\n      let inProcess = false;\n\n      parseArray.forEach(item => {\n        if (item === \"<\") {\n          inProcess = true;\n        }\n\n        if (!inProcess) {\n          newArray.push(item);\n        }\n\n        if (item === \">\") {\n          inProcess = false;\n        }\n      });\n\n      newArray.forEach(item => {\n        newString += item;\n      });\n      \n      // newborn\n      return newString;\n    };\n\n        // console.log(this.state.tvShow.image)\n        return(\n            <div className=\"tvShowInfo\">\n                <div className=\"tvShowPhoto\">\n                    <img src={this.state.image} alt={this.state.tvShow.name} />\n                </div>\n                <div className=\"tvShowDescription\">\n                    <h2>{this.state.tvShow.name}</h2>\n\n                    <p>Genres: {this.state.genre}</p>\n                    <p>Network Name: {this.state.network}</p>\n                    <p>Time: {this.state.time}</p>\n                    <p>{removeTags(this.state.summary)}</p>\n                    <a href={this.state.imdb}>Go to Imdb</a>\n\n                    <h3><Link to=\"/\"> Return to main page </Link></h3>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SingleTvShowInfo;\n","import React from 'react';\n\nexport default function SelectGenre(props) {\n    return (\n        <div className=\"dropdownGenre\" >\n            <label className=\"visuallyHidden\" htmlFor=\"genres\">please select a genre to get results for that genre</label>\n            <select name=\"genres\" id=\"genres\" onChange={props.filteredShow}>\n                <option value=\"Action\">Action</option>\n                <option value=\"Adventure\">Adventure</option>\n                <option value=\"Anime\">Anime</option>\n                <option value=\"Comedy\">Comedy</option>\n                <option value=\"Crime\">Crime</option>\n                <option value=\"Drama\">Drama</option>\n                <option value=\"Family\">Family</option>\n                <option value=\"Mystery\">Mystery</option>\n                <option value=\"Romance\">Romance</option>\n                <option value=\"Science-Fiction\">Science-Fiction</option>\n                <option value=\"Thriller\">Thriller</option>\n            </select>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function SelectDay(props) {\n    return(\n        <div className=\"dropdownDays\">\n            <label className=\"visuallyHidden\" htmlFor=\"days\">please select a day to get results for that day</label>\n            <select name=\"days\" id=\"days\" onChange={props.getDay}>\n                <option value=\"Monday\">Monday</option>\n                <option value=\"Tuesday\">Tuesday</option>\n                <option value=\"Wednesday\">Wednesday</option>\n                <option value=\"Thursday\">Thursday</option>\n                <option value=\"Friday\">Friday</option>\n                <option value=\"Saturday\">Saturday</option>\n                <option value=\"Sunday\">Sunday</option>\n            </select>\n        </div>\n    )\n}\n","import firebase from \"firebase/app\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCTUgM1Yl7wn2oCzdAP4YA3bNpP2r53oqE\",\r\n  authDomain: \"notsosocial-aecab.firebaseapp.com\",\r\n  databaseURL: \"https://notsosocial-aecab.firebaseio.com\",\r\n  projectId: \"notsosocial-aecab\",\r\n  storageBucket: \"notsosocial-aecab.appspot.com\",\r\n  messagingSenderId: \"973516437107\",\r\n  appId: \"1:973516437107:web:1524f659823adb27795c06\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\n// firebase\r\nimport Firebase from \"../util/config\";\r\nimport \"firebase/database\";\r\n// sweet alert\r\nimport Swal from \"sweetalert2\";\r\n// firebase database\r\nconst db = Firebase.database();\r\n\r\nexport default class CreateNewEvent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      eventName: \"\",\r\n      partySize: \"\",\r\n      type: \"\"\r\n    };\r\n  }\r\n\r\n  handleOnSubmit = e => {\r\n    e.preventDefault();\r\n    // if none of the values in the state is null\r\n    if (Object.values(this.state).indexOf(\"\") === -1) {\r\n      // use the event name as the route key and update with party size and type of event info from state\r\n      const { eventName, partySize, type } = this.state;\r\n      // push new event obj from state to firebase\r\n      db.ref(`events`).push({\r\n        eventName: eventName,\r\n        partySize: partySize,\r\n        type: type\r\n      });\r\n      // success message\r\n      Swal.fire(\"Good Job !\", \"Your event has been created!\", \"success\");\r\n      // empty out the inputs after the user has submitted their new event\r\n      this.setState({\r\n        eventName: \"\",\r\n        partySize: \"\",\r\n        type: \"\"\r\n      });\r\n    } else {\r\n      // else show error message\r\n      Swal.fire(\"Oops...\", \"Please fill all inputs!\", \"error\");\r\n    }\r\n  };\r\n\r\n  // dynamically handle set states with the event's id, and set the state with event's value\r\n  handelOnChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"wrapper createNewEvent\">\r\n        <h2>Didn't find an event? Create a new event here!</h2>\r\n        <form onSubmit={this.handleOnSubmit}>\r\n          {/* Event Name */}\r\n          <label htmlFor=\"eventName\">Please enter event name.</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handelOnChange}\r\n            id=\"eventName\"\r\n            name=\"eventName\"\r\n            placeholder=\"Event name\"\r\n            value={this.state.eventName}\r\n          />\r\n          {/* Event party size */}\r\n          <label htmlFor=\"partySize\">Please enter party size.</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            onChange={this.handelOnChange}\r\n            id=\"partySize\"\r\n            name=\"partySize\"\r\n            placeholder=\"Party size\"\r\n            value={this.state.partySize}\r\n          />\r\n          {/* Event type */}\r\n          <label htmlFor=\"type\">Please enter type of event</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handelOnChange}\r\n            id=\"type\"\r\n            name=\"type\"\r\n            placeholder=\"Type of event\"\r\n            value={this.state.type}\r\n          />\r\n          {/* Submit button */}\r\n\r\n          <label className=\"visuallyHidden\" htmlFor=\"submit\">\r\n            Submit your new event here.\r\n          </label>\r\n          <input type=\"submit\" id=\"submit\" name=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </section>\r\n      // end of create new event section\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n// firebase\nimport Firebase from \"../util/config\";\nimport \"firebase/database\";\n\nimport axios from \"axios\";\n\n// initiate firebase db\nconst db = Firebase.database().ref(\"events\");\n\nexport default class FirebaseDatabase extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allEventsArray: []\n    };\n  }\n\n  componentDidMount() {\n    // getting all events from firebase db\n    db.on(\"value\", async snapshot => {\n      // getting the value from snapshot and put it in an data constant\n      const data = snapshot.val();\n      let newStateWithEvents = [];\n      // using a for loop we are getting each object's key and use it\n      for (const key in data) {\n        // if the data has the key\n        if (data.hasOwnProperty(key)) {\n          // the constant object called event will be used to create a new object\n          const event = data[key];\n          // name: event name\n          // type: type of event\n          // partySize: party size\n          const eventObj = {\n            name: event.eventName,\n            type: event.type,\n            partySize: event.partySize\n          };\n\n          // axios get to get the gif url from giphy api\n          await axios({\n            url: \"https://api.giphy.com/v1/gifs/search?\",\n            method: \"GET\",\n            dataType: \"json\",\n            params: {\n              api_key: \"jRZvAnoNBqc9hIvol9x5B8ImgDUKOuSY\",\n              q: eventObj.name\n            }\n          }).then(data => {\n            const imageSrcArr = data.data.data;\n            const randomArrIndex = Math.floor(\n              Math.random() * Math.floor(imageSrcArr.length - 1)\n            );\n            eventObj.socialEventImage =\n              imageSrcArr[randomArrIndex].images.original.url;\n          });\n\n          // push all events into the empty array in a loop\n          newStateWithEvents.push(eventObj);\n        }\n      }\n      // set the state with the new array\n      this.setState({\n        allEventsArray: newStateWithEvents\n      });\n    });\n  }\n\n  renderEvents = () => {\n    // map through the all events array and render elements, for each event clicked call the retrieveEventClicked props and pass the eventClicked obj in so App.js will make use of it\n    return this.state.allEventsArray.map((eventClicked, i) => {\n      const liStyle = {\n        background: `url(${eventClicked.socialEventImage})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\"\n      };\n\n      const handleOnClick = event => {\n        this.props.retrieveEventClicked(event);\n      };\n\n      return (\n        <li className=\"singleEvent\" key={i}>\n          <button style={liStyle} onClick={() => handleOnClick(eventClicked)}>\n            <div className=\"innerContainerText\">\n              <h2>{eventClicked.name}</h2>\n              <p>type: {eventClicked.type}</p>\n              <p>party size: {eventClicked.partySize}</p>\n            </div>\n          </button>\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"renderListOfEvents\">\n        <div className=\"wrapper\">\n          <ul className=\"listOfEvents\">\n            {/* only run renderEvents if allEventsArray isn't empty*/}\n            {this.state.allEventsArray && this.renderEvents()}\n          </ul>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class DisplayResultDashboard extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // this is the image url for gif that renders\r\n      socialEventImage: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // destructuring the name key from a single event obj passed as a prop\r\n    const { name } = this.props.eventClicked;\r\n    // axios get to get the gif url from giphy api\r\n    axios({\r\n      url: \"https://api.giphy.com/v1/gifs/search?\",\r\n      method: \"GET\",\r\n      dataType: \"json\",\r\n      params: {\r\n        api_key: \"jRZvAnoNBqc9hIvol9x5B8ImgDUKOuSY\",\r\n        q: name\r\n      }\r\n    })\r\n      .then(data => {\r\n        const imageSrcArr = data.data.data;\r\n        const randomArrIndex = Math.floor(\r\n          Math.random() * Math.floor(imageSrcArr.length - 1)\r\n        );\r\n\r\n        // set the state for the gif img element's src to use the gif link\r\n        this.setState({\r\n          socialEventImage: imageSrcArr[randomArrIndex].images.original.url\r\n        });\r\n        // once the state is set scroll to this component ref, section with the class of displayResultRef\r\n        window.scrollTo({\r\n          top: this.displayResultRef.offsetTop,\r\n          left: 0,\r\n          behavior: \"smooth\"\r\n        });\r\n      })\r\n      .catch(() => {\r\n        Swal.fire({\r\n          title: \"Error!\",\r\n          text: \"Something went wrong!\",\r\n          icon: \"error\",\r\n          confirmButtonText: \"Cool\"\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // if the previous state doesn't equal to the current state, it means the user has selected a new event, rerun axios call\r\n    if (prevProps.eventClicked !== this.props.eventClicked) {\r\n      const { name } = this.props.eventClicked;\r\n      axios({\r\n        url: \"https://api.giphy.com/v1/gifs/search?\",\r\n        method: \"GET\",\r\n        dataType: \"json\",\r\n        params: {\r\n          api_key: \"jRZvAnoNBqc9hIvol9x5B8ImgDUKOuSY\",\r\n          q: name\r\n        }\r\n      })\r\n        .then(data => {\r\n          const imageSrcArr = data.data.data;\r\n          const randomArrIndex = () => {\r\n            return Math.floor(\r\n              Math.random() * Math.floor(imageSrcArr.length - 1)\r\n            );\r\n          };\r\n          // set the state for the gif img element's src to use the gif link\r\n          this.setState({\r\n            socialEventImage: imageSrcArr[randomArrIndex()].images.original.url\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          Swal.fire({\r\n            title: \"Error!\",\r\n            text: \"Something went wrong!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Cool\"\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // destructuring both props from app.js\r\n    const { name, type, partySize } = this.props.eventClicked;\r\n    let {\r\n      title,\r\n      image,\r\n      id,\r\n    } = this.props.tvShowClicked;\r\n\r\n    this.props.tvShowClicked.image = this.props.tvShowClicked.image.replace(\r\n      /^http:\\/\\//i,\r\n      \"https://\"\r\n    );\r\n\r\n    return (\r\n      <section\r\n        className=\"DisplayResultDashboard\"\r\n        // ref for the scroll down to here\r\n        ref={ref => (this.displayResultRef = ref)}\r\n      >\r\n        <div className=\"wrapper\">\r\n          <h2>Display Results:</h2>\r\n          <div className=\"halfDivider\">\r\n            <div className=\"eventResult\">\r\n              <h2>Social Event details</h2>\r\n              <img\r\n                src={this.state.socialEventImage}\r\n                alt=\"random gif that plays on page load representing the event\"\r\n              />\r\n              <p>Name: {name}</p>\r\n              <p>Type: {type}</p>\r\n              <p>Party Size: {partySize}</p>\r\n            </div>\r\n            {/* end of eventResult */}\r\n            <div className=\"tvShowResults\">\r\n              <h2>What you are doing instead</h2>\r\n              <h2>{title}</h2>\r\n              <div className=\"tvShowResultsImageContainer\">\r\n                <img src={image} alt={name} />\r\n              </div>\r\n              <Link to={`/tv/${id}`}>Click here for more info</Link>\r\n            </div>\r\n            {/* end of tvShowResults*/}\r\n          </div>\r\n          {/* end of half divider */}\r\n        </div>\r\n        {/* end of wrapper */}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n// react router\nimport { Link } from \"react-router-dom\";\n\nexport default class GetRandomTvShow extends Component {\n  constructor() {\n    super();\n    this.state = {\n      randomTvShow: null\n    };\n  }\n\n  handleOnClick = () => {\n    // getting the max shows in the array of filteredTvShows object passed as a prop\n    const maxTvShows = this.props.filteredTvShows.length - 1;\n    // get a random number with that maxTvShows as a constrain\n    let randomNumberIndex = Math.floor(Math.random() * Math.floor(maxTvShows));\n    // set the state outputted from the single object from filteredTvShows array prop and passing random index number from randomNumberIndex\n    this.setState({\n      randomTvShow: this.props.filteredTvShows[randomNumberIndex]\n    });\n  };\n\n  renderRandomTvShow = show => {\n    // using the state passed in the render method when calling this function, re-organize it to information we need\n    let newRandomTvShowObjectToDisplay = {\n      title: show.name,\n      id: show.id,\n      image: show.image.original\n    };\n\n    newRandomTvShowObjectToDisplay.image = newRandomTvShowObjectToDisplay.image.replace(\n      /^http:\\/\\//i,\n      \"https://\")\n    // destructuring for use\n    const { title, id, image } = newRandomTvShowObjectToDisplay;\n\n    return (\n      <div className=\"randomShow\" key={id}>\n        <button\n          onClick={() =>\n            this.props.retrieveTvShowClicked(newRandomTvShowObjectToDisplay)\n          }\n        >\n          <h2>{title}</h2>\n          <img src={image} alt={title} />\n          <Link to={`/tv/${id}`}>Click here for more info</Link>\n        </button>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"randomContainer\">\n        <button className=\"randomButton\" onClick={this.handleOnClick}>\n          Get Random Tv Show\n        </button>\n        {this.state.randomTvShow &&\n          this.renderRandomTvShow(this.state.randomTvShow)}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { Link } from \"react-router-dom\";\nimport SelectGenre from \"./SelectGenre\";\nimport SelectDay from \"./SelectDay\";\nimport CreateNewEvent from \"./CreateNewEvent\";\nimport FirebaseDatabase from \"./FirebaseDatabase\";\nimport DisplayResultDashboard from \"./DisplayResultDashboard\";\nimport GetRandomTvShow from \"./GetRandomTvShow\";\n\nclass TvShows extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiData: [],\n      showsFilteredByDay: [],\n      showsFilteredByGenre: [],\n      selectedDay: \"Monday\",\n      selectedGenre: \"Action\",\n      showsArray: false,\n      genreArray: false,\n      eventClicked: null,\n      tvShowClicked: null\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      url: \"https://api.tvmaze.com/shows\",\n      method: \"GET\",\n      async: true,\n      crossDomain: true,\n      dataType: \"json\"\n    })\n      .then(response => {\n        this.setState({\n          apiData: response.data\n        });\n      })\n      .then(() => this.getShows(this.state.apiData, this.state.selectedDay))\n      .catch(() => {\n        Swal.fire({\n          title: \"Error!\",\n          text: \"Something went wrong!\",\n          icon: \"error\",\n          confirmButtonText: \"Cool\"\n        });\n      });\n  }\n\n  retrieveEventClicked = event => {\n    this.setState({\n      eventClicked: event\n    });\n    // once the state is set scroll to this component ref, section with the class of DisplayResultDashboard\n    window.scrollTo({\n      top: this.scrollRef.offsetTop,\n      left: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  retrieveTvShowClicked = event => {\n    this.setState({\n      tvShowClicked: event\n    });\n  };\n\n  // based on the day currently saved in state, make an API call to retrieve the shows airing then.\n  // save the returned data to state as an array of show objects.\n  getShows = (showList, dayOfWeek) => {\n    let tempArray = [];\n\n    for (let aShow in showList) {\n      let broadCastDay = showList[aShow].schedule.days;\n\n      if (broadCastDay.includes(dayOfWeek)) {\n        if (!showList[aShow].network) {\n          showList[aShow].network = showList[aShow].webChannel;\n        }\n        tempArray.push(showList[aShow]);\n      }\n    }\n\n    this.setState({\n      showsFilteredByDay: tempArray,\n      showsArray: true,\n      genreArray: false\n    });\n  };\n\n  // when user selects a day, save the day to state\n  getDay = event => {\n    event.preventDefault();\n    let newDay = event.target.value;\n    this.setState({\n      selectedDay: newDay\n    });\n\n    this.getShows(this.state.apiData, newDay);\n  };\n\n  // filter show once the user inputs the genre\n  filteredShow = event => {\n    let filteredArrayGenre = [];\n    let userGenre = event.target.value;\n    this.state.showsFilteredByDay.map(data => {\n      return data.genres.forEach(genre => {\n        if (genre === userGenre) {\n          filteredArrayGenre.push(data);\n        }\n      });\n    });\n    if (!filteredArrayGenre[0]) {\n      Swal.fire({\n        title: \"Error!\",\n        text: \"Something went wrong!\",\n        icon: \"error\",\n        confirmButtonText: \"Cool\"\n      });\n    }\n    this.setState({\n      showsFilteredByGenre: filteredArrayGenre,\n      showsArray: false,\n      genreArray: true\n    });\n  };\n\n  renderAllFilteredTvShows = array => {\n    // if the first item in showsFilteredByGenre isn't null, we can start the function\n\n    if (array[0]) {\n      // map the array of objects\n      return array.map(show => {\n        // for each obj in the arr, filter out only the info we want:\n        // TV show title\n        // tv show id for key\n        // Picture src\n        // Link to IMDB page\n        // genres from array to string\n        // Description of show in html\n        // Network name string\n        // Scheduled time to play\n        let newTvShowObjectToDisplay = {\n          title: show.name,\n          id: show.id,\n          image: show.image.original,\n          imdb: `https://www.imdb.com/title/${show.externals.imdb}`,\n          genres: show.genres.join(\" \"),\n          summaryHtml: show.summary,\n          network: show.network.name,\n          time: show.schedule.time\n        };\n\n        newTvShowObjectToDisplay.image = newTvShowObjectToDisplay.image.replace(\n          /^http:\\/\\//i,\n          \"https://\"\n        );\n\n        // destructuring the newTvShowObjectToDisplay obj\n        const { title, id, image } = newTvShowObjectToDisplay;\n\n        // rendering the li\n        return (\n          <li className=\"tvShowListItem\" key={id}>\n            <button\n              onClick={() =>\n                this.retrieveTvShowClicked(newTvShowObjectToDisplay)\n              }\n            >\n              <h2>{title}</h2>\n              <img src={image} alt={title} />\n              <Link to={`/tv/${id}`}>Click here for more info</Link>\n              {/* <div>{summaryHtml}</div> */}\n            </button>\n          </li>\n        );\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <section className=\"selectSection\">\n          <SelectDay getDay={this.getDay} />\n          {/* start of genres selection */}\n\n          {/* gets all events json object from firebase and render the page with those events in an ul element as a button, has a callback function that retrieves the event obj user selected via onClick, and sets the state with that event obj */}\n          \n          <FirebaseDatabase retrieveEventClicked={this.retrieveEventClicked} ref={ref => (this.scrollRef = ref)} />\n          \n\n          {/* a form consist of inputs that allows user to create new events and display onto the page, also sends the information to firebase database */}\n          <CreateNewEvent />\n\n          <SelectGenre filteredShow={this.filteredShow} ref={ref => (this.SelectGenreRef = ref)} />\n          {/* end of dropdown days */}\n          {/* start of displaySection filtered shows by day */}\n          {this.state.showsArray && (\n            <div\n              className=\"tvShowWrapper displaySection\"\n              ref={ref => (this.scrollRef = ref)}\n            >\n              <div className=\"displayInner\">\n                <ul className=\"displayAllFilteredTvShows\">\n                  {this.renderAllFilteredTvShows(this.state.showsFilteredByDay)}\n                </ul>\n              </div>\n            </div>\n          )}\n          {/* start of displaySection filtered shows by genre */}\n          {this.state.genreArray && (\n            <div className=\"tvShowWrapper displaySection\">\n              <div className=\"displayInner\">\n                <ul className=\"displayAllFilteredTvShows\">\n                  {this.renderAllFilteredTvShows(\n                    this.state.showsFilteredByGenre\n                  )}\n                </ul>\n              </div>\n            </div>\n          )}\n          {/* get random tv show button that shows up if genreArray isn't null */}\n          {this.state.genreArray && (\n            <GetRandomTvShow\n              retrieveTvShowClicked={this.retrieveTvShowClicked}\n              filteredTvShows={this.state.showsFilteredByGenre}\n            />\n          )}\n        </section>\n\n        {/* once the state is set with both the user selected event and tv show, render the results at the end of the page */}\n\n        {this.state.eventClicked && this.state.tvShowClicked && (\n          <DisplayResultDashboard\n            eventClicked={this.state.eventClicked}\n            tvShowClicked={this.state.tvShowClicked}\n          />\n        )}\n      </div>\n      // end of select section\n    );\n  }\n}\n\nexport default TvShows;\n","import React from \"react\";\n\nexport default function Header() {\n  return (\n    <header>\n      <h1 className=\"glow\"> Not So Social </h1>\n    </header>\n  );\n}\n","import React from \"react\";\nimport ScrollUpButton from \"react-scroll-up-button\";\n\nexport default function Footer() {\n  return (\n    <footer>\n      <p>Created by: <a href=\"https://github.com/Not-So-Social/notSoSocial\"> Hira Ahsan, Lewis Brignell, Nick Wang, Tiffany Wong </a> </p>\n      <ScrollUpButton />\n    </footer>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport TvShows from \"./TvShows\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <Fragment>\n        {/* skip-link for accessability to skip to main content*/}\n        <a href=\"#maincontent\" className=\"skip-link\">\n          Skip to main content.\n        </a>\n        {/* a functional component that renders the header */}\n        <Header />\n        <main id=\"maincontent\">\n          {/* get tvShows from tvMaze api and has a call back to set state on this component with a single tv show selected by use via onClick */}\n          <TvShows retrieveTvShowClicked={this.retrieveTvShowClicked} />\n        </main>\n        {/* footer, am I repeating myself? */}\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from \"react\";\r\nimport \"./styles/style.scss\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport SingleTvShowInfo from \"./components/SingleTvShowInfo\";\r\nimport MainPage from \"./components/MainPage\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      eventClicked: null,\r\n      tvShowClicked: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename=\"/notSoSocial\">\r\n        <Switch>\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Route path=\"/tv/:id\" component={SingleTvShowInfo} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}